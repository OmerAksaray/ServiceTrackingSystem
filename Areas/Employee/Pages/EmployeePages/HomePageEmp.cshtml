@page "/employee/home"
@model ServiceTrackingSystem.Areas.Employee.Pages.EmployeePages.HomePageEmpModel
@{
    ViewData["Title"] = "Employee Home Page";
}

<div class="container mt-4">
    <h2>Welcome Employee</h2>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Address Information</h4>
        </div>
        <div class="card-body">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label for="citySelect">City</label>
                    <select id="citySelect" name="Input.Location.CityId" class="form-control">
                        <option value="">Select City</option>
                        @foreach (var city in Model.Cities)

                        {
                            <option value="@city.CityId">@city.CityName</option>
                        }
                    </select>
                    <input type="hidden" id="cityNameInput" name="Input.Location.CityName" />
                </div>

                <div class="form-group">
                    <label for="districtSelect">District</label>
                    <select id="districtSelect" name="Input.Location.DistrictName" class="form-control" disabled>
                        <option value="">Select District</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="neighborhoodSelect">Neighborhood</label>
                    <select id="neighborhoodSelect" name="Input.Location.NeighborhoodName" class="form-control" disabled>
                        <option value="">Select Neighborhood</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="streetSelect">Street</label>
                    <select id="streetSelect" name="Input.Location.StreetName" class="form-control" disabled>
                        <option value="">Select Street</option>
                    </select>
                </div>

                <div class="form-group">
                    <label asp-for="Input.Address">Detailed Address</label>
                    <textarea asp-for="Input.Address" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Input.Address" class="text-danger"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="Input.IsActive" class="form-check-input" type="checkbox">
                    <label asp-for="Input.IsActive" class="form-check-label">
                        Set as Active Address
                    </label>
                </div>

                <button type="submit" class="btn btn-primary">Save Address</button>
            </form>

            <!-- Existing addresses list omitted for brevity -->
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Handler URLs for Razor Page methods
        const districtsUrl = '@Url.Page(null, "Districts", new { area = "Employee" })';
        const neighborhoodsUrl = '@Url.Page(null, "Neighborhoods", new { area = "Employee" })';
        const streetsUrl = '@Url.Page(null, "Streets", new { area = "Employee" })';

        function loadDistricts() {
            console.log('▶ loadDistricts fired, cityId=', document.getElementById('citySelect').value);
            const cityId = document.getElementById('citySelect').value;
            const cityName = document.getElementById('citySelect').selectedOptions[0].text;
            document.getElementById('cityNameInput').value = cityName;
            if (!cityId) return;

            fetch(`${districtsUrl}&cityId=${cityId}`)
                .then(res => res.json())
                .then(data => {
                    const districtSelect = document.getElementById('districtSelect');
                    const neighborhoodSelect = document.getElementById('neighborhoodSelect');
                    const streetSelect = document.getElementById('streetSelect');

                    districtSelect.innerHTML = '<option value="">Select District</option>';
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.ilceAdi;
                        option.textContent = item.ilceAdi;
                        districtSelect.appendChild(option);
                    });
                    districtSelect.disabled = false;

                    neighborhoodSelect.disabled = true;
                    neighborhoodSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                    streetSelect.disabled = true;
                    streetSelect.innerHTML = '<option value="">Select Street</option>';
                })
                .catch(err => console.error('Error loading districts:', err));
        }

        function loadNeighborhoods() {
            console.log('▶ loadNeighborhoods fired');
            const cityId = document.getElementById('citySelect').value;
            const district = document.getElementById('districtSelect').value;
            if (!district) return;

            fetch(`${neighborhoodsUrl}&cityId=${cityId}&district=${encodeURIComponent(district)}`)
                .then(res => res.json())
                .then(data => {
                    const nbrSelect = document.getElementById('neighborhoodSelect');
                    const stSelect = document.getElementById('streetSelect');

                    nbrSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.mahalleAdi;
                        option.textContent = item.mahalleAdi;
                        nbrSelect.appendChild(option);
                    });
                    nbrSelect.disabled = false;

                    stSelect.disabled = true;
                    stSelect.innerHTML = '<option value="">Select Street</option>';
                })
                .catch(err => console.error('Error loading neighborhoods:', err));
        }

        function loadStreets() {
            console.log('▶ loadStreets fired');
            const cityId = document.getElementById('citySelect').value;
            const mahalle = document.getElementById('neighborhoodSelect').value;
            if (!mahalle) return;

            fetch(`${streetsUrl}&cityId=${cityId}&neighborhood=${encodeURIComponent(mahalle)}`)
                .then(res => res.json())
                .then(data => {
                    const streetSelect = document.getElementById('streetSelect');
                    streetSelect.innerHTML = '<option value="">Select Street</option>';
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.sokakAdi;
                        option.textContent = item.sokakAdi;
                        streetSelect.appendChild(option);
                    });
                    streetSelect.disabled = false;
                })
                .catch(err => console.error('Error loading streets:', err));
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('citySelect')
                .addEventListener('change', loadDistricts);
            document.getElementById('districtSelect')
                .addEventListener('change', loadNeighborhoods);
            document.getElementById('neighborhoodSelect')
                .addEventListener('change', loadStreets);
        });
    </script>
}
