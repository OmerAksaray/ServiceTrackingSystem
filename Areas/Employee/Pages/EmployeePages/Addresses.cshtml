@page "/employee/addresses"
@model ServiceTrackingSystem.Areas.Employee.Pages.EmployeePages.AddressesModel
@{
    ViewData["Title"] = "Address Management";
    Layout = "_EmployeeLayout";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="fas fa-map-marker-alt me-2"></i>@(Model.EditingAddressId.HasValue ? "Edit Address" : "Add New Address")</h4>
            <a asp-page="./AddressManager" class="btn btn-light"><i class="fas fa-arrow-left me-1"></i> Back to List</a>
        </div>
        
        @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
            var statusClass = Model.StatusMessage.Contains("error") || Model.StatusMessage.Contains("Error") ? "danger" : "success";
            <div class="alert alert-@statusClass alert-dismissible fade show mx-3 mt-3" role="alert" id="statusMessage">
                @Model.StatusMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        
        <div class="card-body">
            <form method="post" asp-page-handler="SaveAddress">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @Html.AntiForgeryToken()
                
                @if (Model.EditingAddressId.HasValue)
                {
                    <input type="hidden" name="addressId" value="@Model.EditingAddressId" />
                }

                <div class="form-group mb-3">
                    <label asp-for="Input.Location.CityId" class="form-label"></label>
                    <select id="citySelect" name="Input.Location.CityId" class="form-select" asp-items="@(Model.Cities != null ? new SelectList(Model.Cities, "CityId", "CityName", Model.Input?.Location?.CityId) : null)" onchange="loadDistricts()">
                        <option value="">Select City</option>
                    </select>
                    <input type="hidden" id="cityNameInput" name="Input.Location.CityName" value="@(Model.Input?.Location?.CityName)" />
                    <span asp-validation-for="Input.Location.CityId" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="districtSelect" class="form-label">District</label>
                    <select id="districtSelect" name="Input.Location.DistrictName" class="form-select" onchange="loadNeighborhoods()">
                        <option value="">Select District</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.DistrictName))
                        {
                            <option value="@Model.Input.Location.DistrictName" selected>@Model.Input.Location.DistrictName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.DistrictName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="neighborhoodSelect" class="form-label">Neighborhood</label>
                    <select id="neighborhoodSelect" name="Input.Location.NeighborhoodName" class="form-select" onchange="loadStreets()">
                        <option value="">Select Neighborhood</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.NeighborhoodName))
                        {
                            <option value="@Model.Input.Location.NeighborhoodName" selected>@Model.Input.Location.NeighborhoodName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.NeighborhoodName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="streetSelect" class="form-label">Street</label>
                    <select id="streetSelect" name="Input.Location.StreetName" class="form-select">
                        <option value="">Select Street</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.StreetName))
                        {
                            <option value="@Model.Input.Location.StreetName" selected>@Model.Input.Location.StreetName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.StreetName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Input.Address" class="form-label"></label>
                    <textarea asp-for="Input.Address" class="form-control" rows="3" placeholder="Enter apartment number, floor, etc."></textarea>
                    <span asp-validation-for="Input.Address" class="text-danger"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="Input.IsActive" class="form-check-input" type="checkbox">
                    <label asp-for="Input.IsActive" class="form-check-label"></label>
                </div>

                <div class="d-flex">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> @(Model.EditingAddressId.HasValue ? "Update" : "Save") Address
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this address?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" asp-page-handler="DeleteAddress" id="deleteForm">
                    <input type="hidden" name="addressId" id="deleteAddressId" value="" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to load districts based on selected city
        function loadDistricts() {
            const cityId = document.getElementById('citySelect').value;
            const cityName = document.getElementById('citySelect').options[document.getElementById('citySelect').selectedIndex].text;
            
            // Update hidden city name field
            document.getElementById('cityNameInput').value = cityName;
            
            // Clear subsequent dropdowns
            clearDropdown('districtSelect', 'Select District');
            clearDropdown('neighborhoodSelect', 'Select Neighborhood');
            clearDropdown('streetSelect', 'Select Street');
            
            if (cityId) {
                // Fetch districts for the selected city
                fetch(`?handler=Districts&cityId=${cityId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const districtSelect = document.getElementById('districtSelect');
                        
                        // Add districts to the dropdown
                        data.forEach(district => {
                            const option = document.createElement('option');
                            option.value = district.districtName;
                            option.text = district.districtName;
                            districtSelect.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching districts:', error);
                        alert('Error loading districts. Please try again.');
                    });
            }
        }
        
        // Function to load neighborhoods based on selected district
        function loadNeighborhoods() {
            const cityId = document.getElementById('citySelect').value;
            const districtName = document.getElementById('districtSelect').value;
            
            // Clear subsequent dropdowns
            clearDropdown('neighborhoodSelect', 'Select Neighborhood');
            clearDropdown('streetSelect', 'Select Street');
            
            if (cityId && districtName) {
                // Fetch neighborhoods for the selected district
                fetch(`?handler=Neighborhoods&districtName=${encodeURIComponent(districtName)}&cityId=${cityId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const neighborhoodSelect = document.getElementById('neighborhoodSelect');
                        
                        // Add neighborhoods to the dropdown
                        data.forEach(neighborhood => {
                            const option = document.createElement('option');
                            option.value = neighborhood.neighborhoodName;
                            option.text = neighborhood.neighborhoodName;
                            neighborhoodSelect.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching neighborhoods:', error);
                        alert('Error loading neighborhoods. Please try again.');
                    });
            }
        }
        
        // Function to load streets based on selected neighborhood
        function loadStreets() {
            const cityId = document.getElementById('citySelect').value;
            const neighborhoodName = document.getElementById('neighborhoodSelect').value;
            
            // Clear street dropdown
            clearDropdown('streetSelect', 'Select Street');
            
            if (cityId && neighborhoodName) {
                // Fetch streets for the selected neighborhood
                fetch(`?handler=Streets&neighborhoodName=${encodeURIComponent(neighborhoodName)}&cityId=${cityId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const streetSelect = document.getElementById('streetSelect');
                        
                        // Add streets to the dropdown
                        data.forEach(street => {
                            const option = document.createElement('option');
                            option.value = street.streetName;
                            option.text = street.streetName;
                            streetSelect.appendChild(option);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching streets:', error);
                        alert('Error loading streets. Please try again.');
                    });
            }
        }
        
        // Utility function to clear a dropdown and add a default option
        function clearDropdown(elementId, defaultText) {
            const dropdown = document.getElementById(elementId);
            dropdown.innerHTML = '';
            
            // Add default option
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = defaultText;
            dropdown.appendChild(defaultOption);
        }
        
        // Function to handle delete confirmation
        function confirmDelete(addressId) {
            document.getElementById('deleteAddressId').value = addressId;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }
        
        // Confirm active address change
        function confirmSetActive(addressId, addressDetail) {
            if (confirm('Are you sure you want to change your active location to "' + addressDetail + '"?')) {
                // If confirmed, submit the form
                document.getElementById('form-active-' + addressId).submit();
            }
        }
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function () {
            // If city is already selected (e.g., in edit mode)
            const citySelect = document.getElementById('citySelect');
            if (citySelect.value) {
                // If district is already selected
                const districtSelect = document.getElementById('districtSelect');
                if (districtSelect.options.length === 2 && districtSelect.options[1].selected) {
                    // If neighborhood is already selected
                    const neighborhoodSelect = document.getElementById('neighborhoodSelect');
                    if (neighborhoodSelect.options.length === 2 && neighborhoodSelect.options[1].selected) {
                        // Load streets if needed
                        const streetSelect = document.getElementById('streetSelect');
                        if (streetSelect.options.length === 1 || 
                            (streetSelect.options.length === 2 && !streetSelect.options[1].selected)) {
                            loadStreets();
                        }
                    } else {
                        // Load neighborhoods
                        loadNeighborhoods();
                    }
                } else {
                    // Load districts
                    loadDistricts();
                }
            }
            
            // Set up auto-dismiss for status message
            const statusMessage = document.getElementById('statusMessage');
            if (statusMessage) {
                setTimeout(() => {
                    const bsAlert = new bootstrap.Alert(statusMessage);
                    bsAlert.close();
                }, 5000); // Auto-dismiss after 5 seconds
            }
        });
    </script>
    
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
