@page "/employee/addresses"
@model ServiceTrackingSystem.Areas.Employee.Pages.EmployeePages.AddressesModel
@{
    ViewData["Title"] = "Address Management";
    Layout = "_EmployeeLayout";
}

<div class="container mt-4">
    <h2>Address Management</h2>
    
    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        var statusClass = Model.StatusMessage.Contains("error") || Model.StatusMessage.Contains("Error") ? "danger" : "success";
        <div class="alert alert-@statusClass alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="card mt-4">
        <div class="card-header bg-primary text-white">
            <h4>@(Model.EditingAddressId.HasValue ? "Edit Address" : "Add New Address")</h4>
        </div>
        <div class="card-body">
            <form method="post" asp-page-handler="SaveAddress">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                @if (Model.EditingAddressId.HasValue)
                {
                    <input type="hidden" name="addressId" value="@Model.EditingAddressId" />
                }

                <div class="form-group mb-3">
                    <label asp-for="Input.Location.CityId" class="form-label"></label>
                    <select id="citySelect" name="Input.Location.CityId" class="form-select" asp-items="@(Model.Cities != null ? new SelectList(Model.Cities, "CityId", "CityName", Model.Input?.Location?.CityId) : null)" onchange="loadDistricts()">
                        <option value="">Select City</option>
                    </select>
                    <input type="hidden" id="cityNameInput" name="Input.Location.CityName" value="@(Model.Input?.Location?.CityName)" />
                    <span asp-validation-for="Input.Location.CityId" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="districtSelect" class="form-label">District</label>
                    <select id="districtSelect" name="Input.Location.DistrictName" class="form-select" onchange="loadNeighborhoods()">
                        <option value="">Select District</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.DistrictName))
                        {
                            <option value="@Model.Input.Location.DistrictName" selected>@Model.Input.Location.DistrictName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.DistrictName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="neighborhoodSelect" class="form-label">Neighborhood</label>
                    <select id="neighborhoodSelect" name="Input.Location.NeighborhoodName" class="form-select" onchange="loadStreets()">
                        <option value="">Select Neighborhood</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.NeighborhoodName))
                        {
                            <option value="@Model.Input.Location.NeighborhoodName" selected>@Model.Input.Location.NeighborhoodName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.NeighborhoodName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label for="streetSelect" class="form-label">Street</label>
                    <select id="streetSelect" name="Input.Location.StreetName" class="form-select">
                        <option value="">Select Street</option>
                        @if (!string.IsNullOrEmpty(Model.Input?.Location?.StreetName))
                        {
                            <option value="@Model.Input.Location.StreetName" selected>@Model.Input.Location.StreetName</option>
                        }
                    </select>
                    <span asp-validation-for="Input.Location.StreetName" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Input.Address" class="form-label"></label>
                    <textarea asp-for="Input.Address" class="form-control" rows="3" placeholder="Enter apartment number, floor, etc."></textarea>
                    <span asp-validation-for="Input.Address" class="text-danger"></span>
                </div>

                <div class="form-check mb-3">
                    <input asp-for="Input.IsActive" class="form-check-input" type="checkbox">
                    <label asp-for="Input.IsActive" class="form-check-label"></label>
                </div>

                <div class="d-flex">
                    <button type="submit" class="btn btn-primary">@(Model.EditingAddressId.HasValue ? "Update" : "Save")</button>
                    @if (Model.EditingAddressId.HasValue)
                    {
                        <a asp-page="./Addresses" class="btn btn-secondary ms-2">Cancel</a>
                    }
                </div>
            </form>
        </div>
    </div>

    <div class="mt-4">
        <a asp-page="./AddressManager" class="btn btn-outline-primary">Manage My Addresses</a>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Sayfa yüklenince başlangıç ayarlarını yap
        document.addEventListener('DOMContentLoaded', function() {
            // Otomatik temizle
            setTimeout(() => {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
            
            // Sayfa yüklenirken düzenleme modunda ise, ilçe/mahalle/sokak bilgilerini yük
            const citySelect = document.getElementById('citySelect');
            if (citySelect.value) {
                loadDistricts(true);
            }
        });
        
        // İl seçilince ilçeleri getir
        function loadDistricts(isPageLoad = false) {
            const citySelect = document.getElementById('citySelect');
            const cityNameInput = document.getElementById('cityNameInput');
            const districtSelect = document.getElementById('districtSelect');
            const neighborhoodSelect = document.getElementById('neighborhoodSelect');
            const streetSelect = document.getElementById('streetSelect');
            
            const selectedCityId = citySelect.value;
            const selectedCityName = citySelect.options[citySelect.selectedIndex].text;
            cityNameInput.value = selectedCityName;
            
            if (selectedCityId) {
                // İl kodu ve ilçe adı parametrelerini gönder
                fetch(`?handler=Districts&cityId=${encodeURIComponent(selectedCityId)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Mevcut seçili ilçeyi sakla
                        const currentSelectedDistrict = districtSelect.value;
                        
                        // Select'i temizle ve varsayılan seçeneği ekle
                        districtSelect.innerHTML = '<option value="">Select District</option>';
                        
                        // API'den gelen ilçeleri ekle
                        if (data && !data.error) {
                            // Konsola gelen veriyi yazdır (debug)
                            console.log('Gelen ilçe verisi:', data);
                            
                            data.forEach(district => {
                                // Console'a her bir district objesini yazdır (debug)
                                console.log('İlçe objesi:', district);
                                
                                const option = document.createElement('option');
                                // Uygun property'leri konusunda esnek ol
                                const districtName = district.ilceAdi || district.ad || district.adi || district.name || district.ilce_adi || district.ILCE_ADI || "";
                                option.value = districtName;
                                option.text = districtName;
                                districtSelect.appendChild(option);
                            });
                            
                            // Eğer düzenleme modundaysa ve mevcut seçili ilçe varsa onu seç
                            if (isPageLoad && currentSelectedDistrict) {
                                districtSelect.value = currentSelectedDistrict;
                                loadNeighborhoods(true);
                            }
                        } else {
                            console.error('İlçe bilgisi alınamadı:', data ? data.error : 'Veri Yüklenemedi');
                        }
                    })
                    .catch(error => {
                        console.error('API hatası:', error);
                    });
                
                // Mahalleleri ve sokakları temizle
                neighborhoodSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                streetSelect.innerHTML = '<option value="">Select Street</option>';
            } else {
                // İl seçili değilse, ilçe, mahalle ve sokak listelerini temizle
                districtSelect.innerHTML = '<option value="">Select District</option>';
                neighborhoodSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                streetSelect.innerHTML = '<option value="">Select Street</option>';
            }
        }
        
        function loadNeighborhoods(isPageLoad = false) {
            const citySelect = document.getElementById('citySelect');
            const districtSelect = document.getElementById('districtSelect');
            const neighborhoodSelect = document.getElementById('neighborhoodSelect');
            const streetSelect = document.getElementById('streetSelect');
            
            const selectedCityId = citySelect.value;
            const selectedDistrictName = districtSelect.value;
            
            if (selectedCityId && selectedDistrictName) {
                // İl kodu ve ilçe adı parametrelerini gönder
                fetch(`?handler=Neighborhoods&cityId=${encodeURIComponent(selectedCityId)}&district=${encodeURIComponent(selectedDistrictName)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Mevcut seçili mahalleyi sakla
                        const currentSelectedNeighborhood = neighborhoodSelect.value;
                        
                        // Select'i temizle ve varsayılan seçeneği ekle
                        neighborhoodSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                        
                        // API'den gelen mahalleleri ekle
                        if (data && !data.error) {
                            // Konsola gelen veriyi yazdır (debug)
                            console.log('Gelen mahalle verisi:', data);
                            
                            data.forEach(neighborhood => {
                                // Console'a her bir mahalle objesini yazdır (debug)
                                console.log('Mahalle objesi:', neighborhood);
                                
                                const option = document.createElement('option');
                                // Uygun property'leri konusunda esnek ol
                                const neighborhoodName = neighborhood.mahalleAdi || neighborhood.ad || neighborhood.adi || neighborhood.name || neighborhood.mahalle_adi || neighborhood.MAHALLE_ADI || "";
                                option.value = neighborhoodName;
                                option.text = neighborhoodName;
                                neighborhoodSelect.appendChild(option);
                            });
                            
                            // Eğer düzenleme modundaysa ve mevcut seçili mahalle varsa onu seç
                            if (isPageLoad && currentSelectedNeighborhood) {
                                neighborhoodSelect.value = currentSelectedNeighborhood;
                                loadStreets(true);
                            }
                        } else {
                            console.error('Mahalle bilgisi alınamadı:', data ? data.error : 'Veri Yüklenemedi');
                        }
                    })
                    .catch(error => {
                        console.error('API hatası:', error);
                    });
                
                // Sokak listesini temizle
                streetSelect.innerHTML = '<option value="">Select Street</option>';
            } else {
                // İl veya ilçe seçili değilse, mahalle ve sokak listelerini temizle
                neighborhoodSelect.innerHTML = '<option value="">Select Neighborhood</option>';
                streetSelect.innerHTML = '<option value="">Select Street</option>';
            }
        }
        
        function loadStreets(isPageLoad = false) {
            const citySelect = document.getElementById('citySelect');
            const neighborhoodSelect = document.getElementById('neighborhoodSelect');
            const streetSelect = document.getElementById('streetSelect');
            
            const selectedCityId = citySelect.value;
            const selectedNeighborhoodName = neighborhoodSelect.value;
            
            if (selectedCityId && selectedNeighborhoodName) {
                // İl kodu ve mahalle adı parametrelerini gönder
                fetch(`?handler=Streets&cityId=${encodeURIComponent(selectedCityId)}&neighborhood=${encodeURIComponent(selectedNeighborhoodName)}`)
                    .then(response => response.json())
                    .then(data => {
                        // Mevcut seçili sokayı sakla
                        const currentSelectedStreet = streetSelect.value;
                        
                        // Select'i temizle ve varsayılan seçeneği ekle
                        streetSelect.innerHTML = '<option value="">Select Street</option>';
                        
                        // API'den gelen sokakları ekle
                        if (data && !data.error) {
                            // Konsola gelen veriyi yazdır (debug)
                            console.log('Gelen sokak verisi:', data);
                            
                            // Veri yoksa kullanıcıya bilgi ver
                            if (!data.length) {
                                console.warn('Bu mahalle için sokak bilgisi bulunamadı!');
                                const option = document.createElement('option');
                                option.value = "";
                                option.text = "No street information found for this neighborhood";
                                streetSelect.appendChild(option);
                                return;
                            }
                            
                            data.forEach(street => {
                                // Console'a her bir sokak objesini yazdır (debug)
                                console.log('Sokak objesi:', street);
                                
                                const option = document.createElement('option');
                                // Uygun property'leri konusunda esnek ol
                                const streetName = street.sokakAdi || street.ad || street.adi || street.name || street.sokak_adi || street.SOKAK_ADI || "";
                                
                                // Debug için sokak adı bilgisini konsola yaz
                                console.log('İşlenen sokak adı:', streetName);
                                
                                if (streetName) {
                                    option.value = streetName;
                                    option.text = streetName;
                                    streetSelect.appendChild(option);
                                } else {
                                    console.error('Bu sokak için geçerli bir ad bulunamadı:', street);
                                }
                            });
                            
                            // Eğer düzenleme modundaysa ve mevcut seçili sokak varsa onu seç
                            if (isPageLoad && currentSelectedStreet) {
                                streetSelect.value = currentSelectedStreet;
                            }
                            
                            // Sokak sayısını kontrol et
                            if (streetSelect.options.length <= 1) {
                                console.warn('No valid streets found!');
                            }
                        } else {
                            console.error('Sokak bilgisi alınamadı:', data ? data.error : 'Veri Yüklenemedi');
                        }
                    })
                    .catch(error => {
                        console.error('API hatası:', error);
                    });
            } else {
                // İl veya mahalle seçili değilse, sokak listesini temizle
                streetSelect.innerHTML = '<option value="">Select Street</option>';
            }
        }
    </script>
}
