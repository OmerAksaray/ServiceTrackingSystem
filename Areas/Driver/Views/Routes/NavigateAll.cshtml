@model IEnumerable<ServiceTrackingSystem.Models.Location>

@{
    ViewBag.Title = "Tüm Lokasyonlara Navigasyon";
    Layout = "~/Areas/Driver/Pages/Shared/_DriverLayout.cshtml";
}

<div class="container-fluid p-4">
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">
                Tüm Lokasyonlara Navigasyon (@Model.Count() adres)
            </h6>

        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-9">
                    <div id="map" style="height: 600px; width: 100%;"></div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <div class="list-group mb-3" id="locationsList">
                            <button id="startNavigationBtn" class="btn btn-success">
                                <i class="fas fa-route"></i> Navigasyonu Başlat
                            </button>
                        </div>
                    </div>
                    <div id="directionsPanel" style="height: 400px; overflow-y: auto;"></div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleMapsApiKey&callback=initMap" async defer></script>
    <script>
        let map;
        let directionsService;
        let directionsRenderer;
        let userPosition = null;
        
        // Get all waypoints from the controller
        const waypoints = @Html.Raw(Json.Serialize(ViewBag.Waypoints));
        
        function initMap() {
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            
            // Initialize with center point (first waypoint if available)
            const mapCenter = waypoints.length > 0 
                ? { lat: waypoints[0].lat, lng: waypoints[0].lng }
                : { lat: 39.9255, lng: 32.8663 }; // Default to Ankara if no waypoints
                
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 10,
                center: mapCenter
            });
            
            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById("directionsPanel"));

            // Add markers for all waypoints
            waypoints.forEach((point, index) => {
                new google.maps.Marker({
                    position: { lat: point.lat, lng: point.lng },
                    map: map,
                    title: point.address,
                    label: (index + 1).toString(),
                    icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
                    }
                });
            });

            // Try to get user's current position
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        userPosition = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        
                        // Add marker for user's position
                        new google.maps.Marker({
                            position: userPosition,
                            map: map,
                            title: "Konumunuz",
                            icon: {
                                url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                            }
                        });
                        
                        // Calculate and display route with all waypoints
                        calculateRoute();
                    },
                    (error) => {
                        console.error("Geolocation error:", error);
                        alert("Konumunuza erişilemiyor. Lütfen konum erişimine izin verin.");
                    }
                );
            } else {
                alert("Tarayıcınız konum hizmetlerini desteklemiyor.");
            }
            
            // Set up button click handler
            document.getElementById("startNavigationBtn").addEventListener("click", openGoogleMapsNavigation);
        }

        function calculateRoute() {
            if (!userPosition || waypoints.length === 0) {
                alert("Konumunuza erişilemiyor veya hedef bulunamadı.");
                return;
            }

            // Prepare waypoints for Google Directions API
            // Exclude first and last points (origin and destination)
            const waypointsForApi = [];
            
            // If we have more than 2 locations, add the intermediate ones as waypoints
            if (waypoints.length > 1) {
                for (let i = 0; i < waypoints.length - 1; i++) {
                    waypointsForApi.push({
                        location: { lat: waypoints[i].lat, lng: waypoints[i].lng },
                        stopover: true
                    });
                }
            }
            
            // Use the last location as the final destination
            const lastWaypoint = waypoints[waypoints.length - 1];

            directionsService.route(
                {
                    origin: userPosition,
                    destination: { lat: lastWaypoint.lat, lng: lastWaypoint.lng },
                    waypoints: waypointsForApi,
                    optimizeWaypoints: true, // Google will optimize the route order
                    travelMode: google.maps.TravelMode.DRIVING,
                    provideRouteAlternatives: false
                },
                (response, status) => {
                    if (status === "OK") {
                        directionsRenderer.setDirections(response);
                        
                        // Update the address list with the optimized order
                        if (response.routes.length > 0 && response.routes[0].waypoint_order) {
                            updateLocationsList(response.routes[0].waypoint_order);
                        }
                    } else {
                        console.error("Directions request failed due to " + status);
                        alert("Rota hesaplanamadı: " + status);
                    }
                }
            );
        }
        
        function updateLocationsList(waypointOrder) {
            // This function reorders the address list based on the optimized waypoint order
            const locationsList = document.getElementById("locationsList");
            const items = Array.from(locationsList.children);
            
            // Create a new ordered list
            const newList = document.createElement("div");
            newList.className = "list-group mb-3";
            
            // First add the starting point (user location)
            const startItem = document.createElement("div");
           
            newList.appendChild(startItem);
            
            // Then add waypoints in the optimized order
            if (items.length > 0) {
                // For each waypoint, add the corresponding list item
                waypointOrder.forEach((index, i) => {
                    if (index < items.length) {
                        const item = items[index].cloneNode(true);
                        
                        // Add the step number to the item
                        const heading = item.querySelector("h6");
                        if (heading) {
                            heading.textContent = `${i + 1}. ${heading.textContent}`;
                        }
                        
                        newList.appendChild(item);
                    }
                });
                
                // Add the final destination
                if (items.length > waypointOrder.length) {
                    const lastItem = items[items.length - 1].cloneNode(true);
                    
                    // Mark as destination
                    lastItem.className += " bg-success text-white";
                    const heading = lastItem.querySelector("h6");
                    if (heading) {
                        heading.textContent = `Varış: ${heading.textContent}`;
                    }
                    
                    newList.appendChild(lastItem);
                }
            }
            
            // Replace the old list with the new one
            locationsList.parentNode.replaceChild(newList, locationsList);
        }
        
        function openGoogleMapsNavigation() {
            if (!userPosition || waypoints.length === 0) {
                alert("Konumunuza erişilemiyor veya hedef bulunamadı.");
                return;
            }
            
            // Prepare the URL for Google Maps
            let url = `https://www.google.com/maps/dir/?api=1&origin=${userPosition.lat},${userPosition.lng}`;
            
            // Add destination (last waypoint)
            const lastWaypoint = waypoints[waypoints.length - 1];
            url += `&destination=${lastWaypoint.lat},${lastWaypoint.lng}`;
            
            // Add waypoints if there are any (max 23 due to Google Maps URL limit)
            if (waypoints.length > 1) {
                const waypointsStr = waypoints
                    .slice(0, Math.min(23, waypoints.length - 1)) // Take up to 23 waypoints, excluding the last one (destination)
                    .map(wp => `${wp.lat},${wp.lng}`)
                    .join('|');
                
                if (waypointsStr) {
                    url += `&waypoints=${waypointsStr}`;
                }
            }
            
            url += "&travelmode=driving";
            
            // Open in new tab
            window.open(url, '_blank');
        }
    </script>
} 